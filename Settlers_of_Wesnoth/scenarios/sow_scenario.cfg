#textdomain wesnoth-Settlers_of_Wesnoth

[multiplayer]
	id=sow_classic
	{~add-ons/Settlers_of_Wesnoth/dist/name_icon_description.cfg}
	map_data="{~add-ons/Settlers_of_Wesnoth/maps/sow_title.map}"
	snapshot=no
	turns=-1
	theme=sow_theme

	{DEFAULT_MUSIC_PLAYLIST}

	# Side 1 - 8 are players (human). They are all allied to prevent units to try to attack each others and cause problems. If they are made AIs or Empty, they will be removed from play at the beginning. That's how you determine how many players there really are.
#define SOW_SIDE SIDE_NUMBER COLOR TEAM_NUMBER ALLOW_PLAYER ALLOW_PLAYER_DEBUG CONTROLLER CONTROLLER_DEBUG
	[side]
		canrecruit=yes
		# NOTE: If there is a default leader here, when used with SoW Era and map settings on,
		# it gets placed, not the sow_leader.
		scroll_to_leader=no
		faction=Loyalists
		type=Fog Clearer
		fog=false
		shroud=true
		share_maps=no
		share_view=no
		team_lock=true
		gold=0
		income=-2
		village_gold=0
		gold_lock=true
		income_lock=true
		color_lock=true

		side={SIDE_NUMBER}
		color={COLOR}
		team_name={TEAM_NUMBER}
#ifdef DEBUG_MODE
		allow_player={ALLOW_PLAYER_DEBUG}
		controller={CONTROLLER_DEBUG}
#else
		allow_player={ALLOW_PLAYER}
		controller={CONTROLLER}
#endif
		[ai]
			ai_algorithm=idle_ai
		[/ai]
	[/side]
#enddef
	{SOW_SIDE 1 red 1 true true human human}
	{SOW_SIDE 2 blue 1 true true human human}
	{SOW_SIDE 3 green 1 true true human human}
	{SOW_SIDE 4 purple 1 true false human null}
	{SOW_SIDE 5 black 1 true false human null}
	{SOW_SIDE 6 brown 1 true false human null}
	{SOW_SIDE 7 orange 1 true false human null}
	{SOW_SIDE 8 teal 1 true false human null}
	{SOW_SIDE 9 white 2 false false ai ai}
	# Side 9 is an enemy AI, it exists so that players can all be allied. It also is the various NPCs and map icons.
#undef SOW_SIDE

#define SOW_INCLUDE_EMBEDDABLE_LUA FILE
	[lua]
		code={~add-ons/Settlers_of_Wesnoth/lua/{FILE}}
	[/lua]
#enddef
	# Activate the lua code
	[event]
		name=preload
		first_time_only=no
		[fire_event]
			name=sow_set_sow_era_is_used
		[/fire_event]
		[fire_event]
			name=sow_set_data
		[/fire_event]
		[if]
			[variable]
				name=sow_era_is_used
				equals=yes
			[/variable]
			[then]
				[lua]
					code=<< wesnoth.dofile "~add-ons/Settlers_of_Wesnoth/lua/main.lua" >>
				[/lua]
				[lua]
					code=<< wesnoth.set_variable("sow_version_actual", wesnoth.dofile("~add-ons/Settlers_of_Wesnoth/dist/clients_version.lua")) >>
				[/lua]
			[/then]
			[else]
				[fire_event]
					name=sow_transfer_data
				[/fire_event]
				{SOW_INCLUDE_EMBEDDABLE_LUA main}
				{SOW_INCLUDE_EMBEDDABLE_LUA constants}
				{SOW_INCLUDE_EMBEDDABLE_LUA tools}
				{SOW_INCLUDE_EMBEDDABLE_LUA sow-wml-tags}
				{SOW_INCLUDE_EMBEDDABLE_LUA no_era_mods}
				{SOW_INCLUDE_EMBEDDABLE_LUA dialogs}
				{SOW_INCLUDE_EMBEDDABLE_LUA image}
			[/else]
		[/if]
	[/event]
#undef SOW_INCLUDE_EMBEDDABLE_LUA
#define SOW_TRANSFER_MAP LETTER
	sow_{LETTER}="{~add-ons/Settlers_of_Wesnoth/maps/sow_{LETTER}.map}"
#enddef
	[event]
		name=sow_transfer_data
		[set_variables]
			name=sow_units
			[value]
				{~add-ons/Settlers_of_Wesnoth/units/}
			[/value]
		[/set_variables]
		[set_variables]
			name=sow_maps
			[value]
				{SOW_TRANSFER_MAP a}
				{SOW_TRANSFER_MAP b}
				{SOW_TRANSFER_MAP c}
				{SOW_TRANSFER_MAP d}
				{SOW_TRANSFER_MAP e}
				{SOW_TRANSFER_MAP f}
				{SOW_TRANSFER_MAP g}
				{SOW_TRANSFER_MAP h}
				{SOW_TRANSFER_MAP i}
				{SOW_TRANSFER_MAP j}
				{SOW_TRANSFER_MAP k}
				{SOW_TRANSFER_MAP l}
				{SOW_TRANSFER_MAP m}
			[/value]
		[/set_variables]
		[set_variables]
			name=sow_terrain_types
			[value]
				{~add-ons/Settlers_of_Wesnoth/utils/sow_terrains.cfg}
			[/value]
		[/set_variables]
	[/event]
#undef SOW_TRANSFER_MAP

#define LUMBER
	"terrain/forest/deciduous-summer.png~CROP(27,20,100,118)~SCALE(50,50)"#enddef
#define GRAIN
	"terrain/grass/dry.png~SCALE(50,50)"#enddef
#define WOOL
	"terrain/grass/green.png~SCALE(50,50)"#enddef
#define BRICK
	"terrain/hills/dry.png~SCALE(50,50)"#enddef
#define ORE
	"terrain/mountains/basic.png~CROP(45,54,86,91)~SCALE(50,50)"#enddef

	[event]
		name=sow_set_data
		[if]
			[variable]
				name=sow_era_is_used
				equals=yes
			[/variable]
			[then]
				[set_variables]
					name=sow_images
					[value]
						icons_lumber="icons/lumber.png"
						icons_grain="icons/grain.png"
						icons_wool="icons/wool.png"
						icons_brick="icons/brick.png"
						icons_ore="icons/ore.png"
					[/value]
				[/set_variables]
			[/then]
			[else]
				[set_variables]
					name=sow_images
					[value]
						# wmlscope: start ignoring
						icons_back="buttons/big-arrow-button-left.png~SCALE(60, 26)"
						# wmlscope: stop ignoring

						icons_lumber={LUMBER}
						icons_grain={GRAIN}
						icons_wool={WOOL}
						icons_brick={BRICK}
						icons_ore={ORE}

						items_lumber={LUMBER}
						items_grain={GRAIN}
						items_wool={WOOL}
						items_brick={BRICK}
						items_ore={ORE}

						units_lumber={LUMBER}
						units_grain={GRAIN}
						units_wool={WOOL}
						units_brick={BRICK}
						units_ore={ORE}

						units_settle="terrain/village/human.png~CROP(1,7,68,71)~SCALE(57,60)"
						units_city="terrain/village/human-city.png~CROP(12,6,66,71)~SCALE(67,72)"

						icons_monopoly="wesnoth-icon.png~SCALE(72,72)"
						icons_victory="wesnoth-icon.png~SCALE(72,72)"

						# wmlscope: start ignoring
						units_roadn="arrows/standard/n-s.png"
						units_roadnw="arrows/standard/se-nw.png"
						units_roadnwfacingnw="arrows/standard/ne-sw.png"
						# wmlscope: stop ignoring
						units_any="units/unknown-unit.png"
						units_robber="units/human-outlaws/bandit.png"
						units_largest="icons/helmet_corinthian.png~SCALE(40,40)"
						units_longest="icons/crossed_sword_and_hammer.png~SCALE(40,40)"
					[/value]
				[/set_variables]
			[/else]
		[/if]
		[set_variables]
			name=sow_team_colors
			[value]
				{core/team-colors.cfg}
			[/value]
		[/set_variables]
	[/event]
#undef LUMBER
#undef GRAIN
#undef WOOL
#undef BRICK
#undef ORE

	{~add-ons/Settlers_of_Wesnoth/utils/sow_help.cfg}
	[event]
		name=prestart
		[fire_event]
			name=sow_set_sow_help
		[/fire_event]
		[lua]
			code=<< sow_manage_leaders() >>
		[/lua]
	[/event]

	[event]
		name=turn 1
		[if]
			[variable]
				name=sow_era_is_used
				not_equals=yes
			[/variable]
			[then]
				[message]
					speaker=narrator
					image=wesnoth-icon.png
					# wmllint: local spelling addon
					message=_"Settlers of Wesnoth is being played without the included era. This unfortunately means reduced playing comfort for everybody, but allows people to play this addon without having it downloaded. You may miss images in case you don't have this addon. I recommend playing Settlers of Wesnoth by choosing 'Settlers of Wesnoth Era' which ensures full playing comfort, but requires everyone who wants to be able to join the game to have downloaded this addon."
				[/message]
			[/then]
		[/if]
		[fire_event]
			name=sow_bfw_version_check
		[/fire_event]
	[/event]

	[event]
		name=sow_end_scenario
		[kill]
			animate=yes
		[/kill]
		[endlevel]
			result=defeat
		[/endlevel]
	[/event]
	[event]
		name=sow_bfw_version_check
		[check_version]
			required={~add-ons/Settlers_of_Wesnoth/dist/required_version}
		[/check_version]
		[fire_event]
			name=sow_turn_one
		[/fire_event]
	[/event]
	[event]
		name=wrong_bfw_version_message
		first_time_only=no
		[message]
			speaker=narrator
			image=wesnoth-icon.png
			message=_"Sorry - at least one player's version of Battle for Wesnoth is not recent enough thus this add-on wouldn't work correctly. Please get BfW " + {~add-ons/Settlers_of_Wesnoth/dist/required_version} + _" or greater. This is required of all joining players."
		[/message]
		[fire_event]
			name=sow_end_scenario
		[/fire_event]
	[/event]

	# Randomly generate map
	[event]
		name=sow_turn_one
		[filter_condition]
			[have_unit]
			[/have_unit]
		[/filter_condition]
		{VARIABLE sow_game_stats.goal 10}
		[lua]
			code=<<
			sow_mapgen()
			sow_set_goal()
			>>
		[/lua]

		[if]
			[variable]
				name=sow_game_stats.leading_player.active
				equals=yes
			[/variable]
			[then]
				[set_variables]
					name=objective
					[value]
						description= _ "Be the player who has the most victory points after the end of turn $sow_game_stats.leading_player.limit"
						condition=win
					[/value]
				[/set_variables]
			[/then]
			[else]
				[set_variables]
					name=objective
					[value]
						description= _ "Be the first player to accumulate $sow_game_stats.goal Victory Points"
						condition=win
					[/value]
				[/set_variables]
			[/else]
		[/if]
		[sow_objectives]
			summary= _ "Development your nascent settlement into a thriving colony!"
			[insert_tag]
				name=objective
				variable=objective
			[/insert_tag]
			[note]
				# wmllint: local spelling Esc
				description=_"<span foreground='red'>Note that this dialog can also be closed by pressing the Esc or the return key.</span>"
			[/note]
			#ifdef DEBUG_MODE
			silent=yes
			#endif
		[/sow_objectives]
		{CLEAR_VARIABLE objective}

		{SOW_CONTEXT_MENUS}

#ifdef DEBUG_MODE
		{SOW_EXECUTE_LUA_NO_RELOAD}
		{SOW_EXECUTE_LUA}
#endif

		#initialize some variables
		{VARIABLE sow_previous_side_turns_turn_number 0}
		{VARIABLE sow_previous_side_turns_side_number 9}
		{VARIABLE sow_game_turn 1}
		{VARIABLE sow_reverse_turn_is_active false}
		{VARIABLE increase_sow_game_turn false}
		[lua]
			code=<< sow_set_reverse_turn_side_numbers() >>
		[/lua]
	[/event]

#ifhave ~add-ons/Wesnoth_Lua_Pack/_main.cfg
#ifdef DEBUG_MODE
	{SOW_UNIT_DEBUG}
#endif
#endif

	[event]
		name=new turn
		first_time_only=no
		[filter_condition]
			[have_unit]
			[/have_unit]
			[variable]
				name=turn_number
				greater_than=1
			[/variable]
			[variable]
				name=sow_game_stats.choosing_turn.active
				boolean_equals=false
			[/variable]
			[variable]
				name=sow_reverse_turn_is_active
				boolean_equals=false
			[/variable]
		[/filter_condition]
		{VARIABLE sow_game_turn "$($sow_game_turn+1)"}
	[/event]
	[event]
		name=new turn
		[filter_condition]
			[have_unit]
			[/have_unit]
			[variable]
				name=increase_sow_game_turn
				equals=true
			[/variable]
		[/filter_condition]
		{VARIABLE sow_game_turn "$($sow_game_turn+1)"}
		{VARIABLE increase_sow_game_turn false}
	[/event]
	[event]
		name=new turn
		[filter_condition]
			[have_unit]
			[/have_unit]
			[variable]
				name=sow_reverse_turn_side_numbers.length
				equals=0
			[/variable]
		[/filter_condition]
		{VARIABLE sow_reverse_turn_is_active false}
		{VARIABLE sow_game_turn "$($sow_game_turn+1)"}
	[/event]
	[event]
		name=new turn
		first_time_only=no
		[filter_condition]
			[variable]
				name=sow_game_stats.leading_player.active
				equals=yes
			[/variable]
			[variable]
				name=sow_game_turn
				greater_than=$sow_game_stats.leading_player.limit
			[/variable]
		[/filter_condition]
		[lua]
			code=<< sow_victory_check(wesnoth.get_variable("sow_game_stats.leading_player.side"), true) >>
		[/lua]
	[/event]

	[event]
		name=side turn
		first_time_only=no
		[filter_condition]
			[variable]
				name=turn_number
				equals=1
			[/variable]
			# already checked
			[variable]
				name=side_number
				not_equals=1
			[/variable]
		[/filter_condition]
		[check_version]
			required={~add-ons/Settlers_of_Wesnoth/dist/required_version}
		[/check_version]
	[/event]
	[event]
		name=side turn
		first_time_only=no
		[filter_condition]
			[variable]
				name=turn_number
				equals=1
			[/variable]
			[variable]
				name=sow_era_is_used
				equals=yes
			[/variable]
		[/filter_condition]
		[check_sow_version]
			required={~add-ons/Settlers_of_Wesnoth/dist/version}
			actual=$sow_version_actual
		[/check_sow_version]
	[/event]
	[event]
		name=wrong_sow_version_message
		[message]
			speaker=narrator
			image=wesnoth-icon.png
			message=_"Sorry - the client owning side $side_number|'s version of Settlers of Wesnoth doesn't match the version the host has, thus this add-on wouldn't work correctly. Please all get the latest version from the add-ons server."
		[/message]
		[fire_event]
			name=sow_end_scenario
		[/fire_event]
	[/event]

	[event]
		name=side turn
		first_time_only=no
		[filter_condition]
			[have_unit]
			[/have_unit]
		[/filter_condition]
		[sow_check_player_valid]
		[/sow_check_player_valid]
		[fire_event]
			name=sow_side_turn_if_player_valid
		[/fire_event]
		[fire_event]
			name=sow_side_turn_if_player_invalid
		[/fire_event]
	[/event]
	[event]
		name=sow_side_turn_if_player_invalid
		[filter_condition]
			[variable]
				name=sow_game_stats.player[$side_number].valid
				boolean_equals=false
			[/variable]
		[/filter_condition]
		[end_turn]
		[/end_turn]
	[/event]
	# Roll die and attribute resources (or activate robber)
	[event]
		name=sow_side_turn_if_player_valid
		first_time_only=false
		[filter_condition]
			[variable]
				name=sow_game_stats.player[$side_number].valid
				boolean_equals=true
			[/variable]
		[/filter_condition]

		[if]
			[variable]
				name=sow_reverse_turn_is_active
				equals=true
			[/variable]
			[then]
				[if]
					[variable]
						name=sow_reverse_turn_side_numbers.length
						greater_than=0
					[/variable]
					[variable]
						name=sow_reverse_turn_side_numbers.number
						equals=$side_number
					[/variable]
					[then]
						[fire_event]
							name=sow_side_turn_manager
						[/fire_event]
						{CLEAR_VARIABLE sow_reverse_turn_side_numbers[0]}
					[/then]
					[else]
						{DBG_SOW "ending turn of side $side_number due to reverse turn..."}
						[end_turn]
						[/end_turn]
					[/else]
				[/if]
			[/then]
			[else]
				{DBG_SOW "firing sow_side_turn_manager instead of reversing turns, sow_reverse_turn_side_numbers.length: $sow_reverse_turn_side_numbers.length|"}
				[if]
					[variable]
						name=sow_reverse_turn_side_numbers.length
						greater_than=0
					[/variable]
					[then]
						{DBG_SOW "sow_reverse_turn_side_numbers.number: $sow_reverse_turn_side_numbers.number|"}
					[/then]
				[/if]
				[fire_event]
					name=sow_side_turn_manager
				[/fire_event]
				[if]
					[variable]
						name=sow_reverse_turn_side_numbers.length
						greater_than=0
					[/variable]
					[variable]
						name=sow_reverse_turn_side_numbers.number
						equals=$side_number
					[/variable]
					[then]
						{VARIABLE sow_reverse_turn_is_active true}
						{VARIABLE increase_sow_game_turn true}
					[/then]
				[/if]
			[/else]
		[/if]
#ifdef DEBUG_MODE
		{DBG_SOW "sow_reverse_turn_side_numbers:"}
		{FOREACH sow_reverse_turn_side_numbers i}
			{DBG_SOW $sow_reverse_turn_side_numbers[$i].number}
		{NEXT i}
#endif
	[/event]

	[event]
		name=sow_side_turn_manager
		first_time_only=false
		[if]
			[variable]
				name=sow_previous_side_turns_turn_number
				greater_than=0
			[/variable]
			[then]
				[fire_event]
					name=sow_side_turn_end
				[/fire_event]
			[/then]
		[/if]
		{VARIABLE sow_previous_side_turns_turn_number $sow_game_turn}
		{VARIABLE sow_previous_side_turns_side_number $side_number}
		[fire_event]
			name=sow_side_turn
		[/fire_event]
		[fire_event]
			name=new_ai_turn
		[/fire_event]
	[/event]
	[event]
		name=turn refresh
		first_time_only=false
		[lua]
			code=<< sow_disable_turn_done_confirm(wesnoth.get_variable("side_number")) >>
		[/lua]
	[/event]

	[event]
		name=new_ai_turn
		first_time_only=false
		[lua]
			code=<< sow_new_ai_turn(wesnoth.get_variable("side_number"), wesnoth.get_variable("sow_game_turn")) >>
		[/lua]
	[/event]
	[event]
		name=sow_side_turn
		first_time_only=false
		[filter_condition]
			[variable]
				name=sow_game_turn
				greater_than=2
			[/variable]
			[variable]
				name=sow_game_stats.choosing_turn.active
				boolean_equals=false
			[/variable]
		[/filter_condition]
		[lua]
			code=<< sow_new_side_turn(wesnoth.get_variable("side_number")) >>
		[/lua]
	[/event]
	[event]
		name=sow_side_turn
		first_time_only=false
		[filter_condition]
			[variable]
				name=sow_game_stats.choosing_turn.active
				boolean_equals=true
			[/variable]
			[variable]
				name=sow_game_stats.choosing_turn.type
				equals=half_resources
			[/variable]
		[/filter_condition]
		[lua]
			code=<< sow_half_resources(wesnoth.get_variable("side_number")) >>
		[/lua]
	[/event]

	[event]
		name=sow_side_turn
		first_time_only=false
		[filter_condition]
			[variable]
				name=sow_game_stats.choosing_turn.active
				boolean_equals=true
			[/variable]
			[variable]
				name=sow_game_stats.choosing_turn.type
				equals=domestic_trade
			[/variable]
		[/filter_condition]
		[lua]
			code= << sow_continue_trade(wesnoth.get_variable("side_number")) >>
		[/lua]
	[/event]

	[event]
		name=sow_side_turn_end
		first_time_only=false
		[filter_condition]
			[variable]
				name=sow_game_stats.choosing_turn.active
				boolean_equals=false
			[/variable]
		[/filter_condition]
		[fire_event]
			name=sow_random_initial_settlements
		[/fire_event]
		[fire_event]
			name=sow_randomize_robber
		[/fire_event]
	[/event]
	[event]
		name=sow_random_initial_settlements
		first_time_only=false
		[filter_condition]
			[variable]
				name=sow_previous_side_turns_turn_number
				less_than_equal_to=2
			[/variable]
		[/filter_condition]
		[lua]
			code=<< sow_random_initial_settlements(wesnoth.get_variable("sow_previous_side_turns_turn_number"), wesnoth.get_variable("sow_previous_side_turns_side_number")) >>
		[/lua]
	[/event]
	[event]
		name=sow_randomize_robber
		first_time_only=false
		# Randomize robber placement if player somehow ended his turn before moving it.
		[filter_condition]
#ifndef DEBUG_MODE
			[variable]
				name=sow_previous_side_turns_turn_number
				greater_than=2
			[/variable]
#endif
			[have_unit]
				type=sow_robber
				[not]
					side=9
				[/not]
			[/have_unit]
			[or]
				[have_unit]
					[filter_wml]
						[variables]
							type=sow_robber
						[/variables]
					[/filter_wml]
					[not]
						side=9
					[/not]
				[/have_unit]
			[/or]
		[/filter_condition]
		[lua]
			code=<< sow_randomize_robber(wesnoth.get_variable("sow_previous_side_turns_side_number")) >>
		[/lua]
	[/event]

	#####################
	[event]
		name=sow_too_many_resources_message
		first_time_only=false
		[message]
			speaker=narrator
			caption=_"Stolen resources!"
			image=units/human-outlaws/bandit.png~SCALE(120,120)
			message=_"The robber was moved. You have $resources.ressources units of resources (out of at maximum $halfed_resources) in total - choose what to discard ($units_left left):"
			[option]
				message={MENU_IMG_TXT2 ($sow_images.icons_lumber) _"<span weight='bold'>Lumber</span>" _"($resources.lumber available)"}
				[command]
					{VARIABLE chosen_resource lumber}
				[/command]
			[/option]
			[option]
				message={MENU_IMG_TXT2 ($sow_images.icons_grain) _"<span weight='bold'>Grain</span>" _"($resources.grain available)"}
				[command]
					{VARIABLE chosen_resource grain}
				[/command]
			[/option]
			[option]
				message={MENU_IMG_TXT2 ($sow_images.icons_wool) _"<span weight='bold'>Wool</span>" _"($resources.wool available)"}
				[command]
					{VARIABLE chosen_resource wool}
				[/command]
			[/option]
			[option]
				message={MENU_IMG_TXT2 ($sow_images.icons_brick) _"<span weight='bold'>Brick</span>" _"($resources.brick available)"}
				[command]
					{VARIABLE chosen_resource brick}
				[/command]
			[/option]
			[option]
				message={MENU_IMG_TXT2 ($sow_images.icons_ore) _"<span weight='bold'>Ore</span>" _"($resources.ore available)"}
				[command]
					{VARIABLE chosen_resource ore}
				[/command]
			[/option]
		[/message]
	[/event]
[/multiplayer]
